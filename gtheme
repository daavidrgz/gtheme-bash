#!/bin/bash

#  ██████╗ ████████╗██╗  ██╗███████╗███╗   ███╗███████╗
# ██╔════╝ ╚══██╔══╝██║  ██║██╔════╝████╗ ████║██╔════╝
# ██║  ███╗   ██║   ███████║█████╗  ██╔████╔██║█████╗  
# ██║   ██║   ██║   ██╔══██║██╔══╝  ██║╚██╔╝██║██╔══╝  
# ╚██████╔╝   ██║   ██║  ██║███████╗██║ ╚═╝ ██║███████╗
#  ╚═════╝    ╚═╝   ╚═╝  ╚═╝╚══════╝╚═╝     ╚═╝╚══════╝


GTHEME_PATH=$XDG_CONFIG_HOME/gtheme
THEMES_PATH=$GTHEME_PATH/themes
PATTERNS_PATH=$GTHEME_PATH/patterns
POSTSCRIPTS_PATH=$GTHEME_PATH/post-scripts
CURRENT_THEME_FILE=$GTHEME_PATH/current-theme

# •• Global Settings
SET_WALLPAPER_SCRIPT="$GTHEME_PATH/setwp"
VSCODE_SETTINGS_FILE="$XDG_CONFIG_HOME/Code/User/settings.json"
ATTR_NAMES=("background" "foreground" "cursor" "selection-background" "selection-foreground" \
"black" "black-hg" "red" "red-hg" "green" "green-hg" "yellow" "yellow-hg" "blue" "blue-hg" "magenta" "magenta-hg" "cyan" "cyan-hg" "white" "white-hg")

# •• Colors
G="\e[1;32m"
R="\e[1;31m"
Y="\e[1;33m"
B="\e[1;34m"
W="\e[0m"
W_B="\e[1m"

trap ctrl_c INT
function ctrl_c() {
	echo -e "\n\n${R}[!]${W} Exiting...\n"
	exit 0
}

function helpPanel() {
	echo -e "\n${Y}[*]${W} Usage: change-theme [OPTION]"
	echo -e "\nIt will set the THEME's color schema to kitty, polybar, rofi and dunst.
More rules can be specified to change the wallpaper, the VSCode color palette, etc..."
	echo -e "\nOPTIONS:
  ${G}-p <PATT1,PATT2...>${W}   Apply the theme only on selected patterns. Important: There must be no spaces between the patterns, only commas.
  ${G}-v${W}                    If -p is specified, apply also the VSCode theme.
  ${G}-w${W}                    If -p is specified, apply also the wallpaper.
  ${G}-l${W}                    List all installed themes.
  ${G}-n <THEME_NAME>${W}       Apply the specified <THEME_NAME>
  ${G}-h${W}                    Show this panel.\n"
}

function executePostScript() {
	declare -r APP_NAME=$1

	echo -e "${B}->${W} Executing post-script..."

	if [ ! -e $POSTSCRIPTS_PATH/$APP_NAME.sh ]; then
		echo -e "${Y}->${W} No post-script found!"
		return
	fi

	$POSTSCRIPTS_PATH/$APP_NAME.sh $2
}

function setWallpaper() {
	declare -r WALLPAPER=$(cat $THEMES_PATH/$1.colors | grep wallpaper | awk -F ': ' '{print $2}')

	[ -z "$WALLPAPER" ] && return

	sed -i "s|.*WALLPAPER_URL=.*|WALLPAPER_URL=$WALLPAPER|" $SET_WALLPAPER_SCRIPT
	if [ ! -x $SET_WALLPAPER_SCRIPT ]; then
		echo -e "\n${Y}[!]${W} $SET_WALLPAPER_SCRIPT is not executable. Run chmod +x $SET_WALLPAPER_SCRIPT to solve it"
		return
	fi
	
	if $SET_WALLPAPER_SCRIPT; then
		echo -e "${B}[+]${W} Wallpaper ${W_B}$(basename $WALLPAPER)${W} applied!\n"

		sed -i "/.*wallpaper.*/d" $CURRENT_THEME_FILE
		echo -e "wallpaper: $WALLPAPER" >> $CURRENT_THEME_FILE
	else
		echo -e "${R}[!]${W} There was an error while setting the wallpaper.\n"
	fi
}

function setVscodeTheme() {
	declare -r VSCODETHEME=$(cat $THEMES_PATH/$1.colors | grep vscode | awk -F ': ' '{print $2}')
	[ -z "$VSCODETHEME" ] && return

	sed -i "s|\"workbench.colorTheme\": \".*\"|\"workbench.colorTheme\": \"$VSCODETHEME\"|" $VSCODE_SETTINGS_FILE
	echo -e "${B}[+]${W} Theme ${W_B}\"$VSCODETHEME\"${W} applied to Visual Studio Code!\n"

	sed -i "/.*vscode.*/d" $CURRENT_THEME_FILE
	echo -e "vscode: $VSCODETHEME" >> $CURRENT_THEME_FILE
}

function fillPattern() {
	echo -e "${B}->${W} Generating file for $1..."

	declare -r PATTERN="$PATTERNS_PATH/$1.pattern"
	declare -r IS_INVERTED=$3

	declare DEST="$(cat $PATTERN | grep -e ".*%output-file%.*" | awk -F '=' '{print $2}')"

	if [ -z "$DEST" ]; then
		echo -e "${R}[!]${W} No output file found. Using the default path."
		DEST=$HOME/.config/$1/gtheme-colors
	fi

	if [ ! -e "$(dirname $DEST)" ]; then
		echo -e "${R}[!]${W} The folder ${W_B}$(dirname $DEST)${W} does not exist!\n"
		return
	fi

	cp $PATTERN $DEST
	
	declare -r CONTENT="$(cat $THEMES_PATH/$2.colors)"
	for attr in ${ATTR_NAMES[@]}; do
		declare VALUE=$(echo "$CONTENT" | grep -e "^$attr:.*" | awk -F ': ' '{print $2}')

		# Invert colors
		if [ $IS_INVERTED -eq 0 ]; then
			if [ "$attr" == "background" ]; then
				attr="foreground"
			elif [ "$attr" == "foreground" ]; then
				attr="background"
			fi
		fi

		sed -i "s|%$attr%|$VALUE|g" $DEST
	done

	sed -i "s|%theme-name%| -------- Theme: $2 --------|" $DEST
	sed -i "s|.*%output-file%.*||" $DEST

	echo -e "${B}->${W} Created file ${W_B}$(basename $DEST)${W} in ${W_B}$(dirname $DEST)${W}"

	executePostScript $1 $DEST

	echo -e "${B}->${W} Theme applied to ${G}$1${W}\n"

	echo -e "---------------------\n"
}

function generateFiles() {
	declare PATTERNS="$1"
	declare -r INVERTED_PATTERNS="$2"
	declare -r THEME_NAME="$3"

	[ -z "$PATTERNS" ] && PATTERNS="$(ls $PATTERNS_PATH | sed 's/\..*//g' )"

	echo
	for PATTERN in $PATTERNS; do
		echo "$INVERTED_PATTERNS" | grep $PATTERN &>/dev/null
		fillPattern $PATTERN $THEME_NAME $?

		sed -i "/$PATTERN:.*/d" $CURRENT_THEME_FILE
		echo -e "$PATTERN: $THEME_NAME" >> $CURRENT_THEME_FILE
	done

	[ $IS_VSCODE -eq 0 ] && setVscodeTheme $THEME_NAME
	[ $IS_WALLPAPER -eq 0 ] && setWallpaper $THEME_NAME
}

function showThemes() {
	declare -i COUNT=0
	declare -a COLOR_SCHEMES=($@)

	echo
	for theme in "${COLOR_SCHEMES[@]}"; do
		if cat $CURRENT_THEME_FILE | grep -e ": ${theme::-7}$" &>/dev/null; then
			echo -e "${B}[$COUNT]${W} ${B}*${W}${theme::-7}${B}*${W} "
		else
			echo -e "${G}[$COUNT]${W} ${theme::-7} "
		fi
		COUNT=$COUNT+1
	done
	echo

	return $COUNT
}

function mainLoop() {
	declare -a COLOR_SCHEMES=($(ls $THEMES_PATH))

	showThemes ${COLOR_SCHEMES[@]}
	declare -r TOTAL_THEMES=$?

	while true; do
		read -p "Select a color scheme: (q to quit) " res

		([ "$res" == "q" ] || [ "$res" == "Q" ]) && ctrl_c

		if [[ ! -n $res || $res -ge $TOTAL_THEMES ]]; then
			echo -e "\n${R}[!]${W} Invalid option!\n"
			continue
		fi

		declare THEME_NAME=${COLOR_SCHEMES[$res]}
		generateFiles "$1" "$2" ${THEME_NAME::-7}

		showThemes ${COLOR_SCHEMES[@]}
	done
}

declare -gi IS_VSCODE=1
declare -gi IS_WALLPAPER=1
function main() {
	while getopts "lhi:n:p:vwe" option; do
		case $option in
			l) showThemes "$(ls $THEMES_PATH)"; exit 0;;
			h) helpPanel; exit 0;;
			n) declare theme_name=$OPTARG;;
			p) declare patterns=$OPTARG;;
			i) declare inverted_patterns=$OPTARG;;
			v) IS_VSCODE=0;;
			w) IS_WALLPAPER=0;;
			*) helpPanel; exit 1;;
		esac
	done
	
	patterns="$(echo $patterns | sed 's/,/ /g')"
	inverted_patterns="$(echo $inverted_patterns | sed 's/,/ /g')"

	for pattern in $patterns $inverted_patterns; do
		if [ ! -e $PATTERNS_PATH/$pattern* ]; then
			echo -e "\n${R}[!]${W} The pattern ${W_B}$pattern${W} does not exist!\n"
			exit 1
		fi
	done

	[ -z $theme_name ] && mainLoop "$patterns" "$inverted_patterns"

	if [ ! -e $THEMES_PATH/$theme_name.colors ]; then
		echo -e "\n${R}[!]${W} The theme ${W_B}$theme_name${W} does not exist!\n"
		exit 1
	fi

	generateFiles "$patterns" "$inverted_patterns" $theme_name
}

main $@
