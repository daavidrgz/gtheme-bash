#!/bin/bash

#  ██████╗ ████████╗██╗  ██╗███████╗███╗   ███╗███████╗
# ██╔════╝ ╚══██╔══╝██║  ██║██╔════╝████╗ ████║██╔════╝
# ██║  ███╗   ██║   ███████║█████╗  ██╔████╔██║█████╗  
# ██║   ██║   ██║   ██╔══██║██╔══╝  ██║╚██╔╝██║██╔══╝  
# ╚██████╔╝   ██║   ██║  ██║███████╗██║ ╚═╝ ██║███████╗
#  ╚═════╝    ╚═╝   ╚═╝  ╚═╝╚══════╝╚═╝     ╚═╝╚══════╝


GTHEME_PATH=$XDG_CONFIG_HOME/gtheme
THEMES_PATH=$GTHEME_PATH/themes
PATTERNS_PATH=$GTHEME_PATH/patterns
EXTRA_FILES_PATH=$GTHEME_PATH/extra-files
CURRENT_THEME_FILE=$GTHEME_PATH/current-theme

# •• Global Settings
SET_WALLPAPER_SCRIPT="$GTHEME_PATH/setwp"
VSCODE_SETTINGS_FILE="$XDG_CONFIG_HOME/Code/User/settings.json"
ATTR_NAMES=("background" "foreground" "cursor" "selection-background" "selection-foreground" \
"black" "black-hg" "red" "red-hg" "green" "green-hg" "yellow" "yellow-hg" "blue" "blue-hg" "magenta" "magenta-hg" "cyan" "cyan-hg" "white" "white-hg")

# •• Colors
G="\e[1;32m"
R="\e[1;31m"
Y="\e[1;33m"
B="\e[1;34m"
W="\e[0m"
W_B="\e[1m"

trap ctr_c INT
function trapCtrlC() {
	echo -e "${R}[!]${W} Exiting...\n"
}

function helpPanel() {
	echo -e "\n${Y}[*]${W} Usage: change-theme [OPTION]"
	echo -e "\nIt will set the THEME's color schema to kitty, polybar, rofi and dunst.
More rules can be specified to change the wallpaper, the VSCode color palette, etc..."
	echo -e "\nOPTIONS:
  ${G}-p <PATT1,PATT2...>${W}   Apply the theme only on selected patterns. Important: There must be no spaces between the patterns, only commas.
  ${G}-v${W}                    If -p is specified, apply also the VSCode theme.
  ${G}-w${W}                    If -p is specified, apply also the wallpaper.
  ${G}-l${W}                    List all installed themes.
  ${G}-n <THEME_NAME>${W}       Apply the specified <THEME_NAME>
  ${G}-h${W}                    Show this panel.\n"
}

# checkExtraFiles() {
# 	declare -r NEW_THEME=$1

# 	for file in $EXTRA_FILES; do
# 		if [ ! -f $file ]; then
# 			echo -e "${R}[!]${W} The file ${W_B}$file${W} does not exist!"
# 			continue
# 		fi

# 		echo -e "${B}->${W} Applying $1 theme to $file..."

# 		declare CONTENT="$(cat $THEMES_PATH/$NEW_THEME.colors)"
# 		for attr in ${ATTR_NAMES[@]}; do
# 			VALUE=$(echo "$CONTENT" | grep -e "^$attr:.*" | awk -F ': ' '{print $2}')
# 			sed -i "s|%$attr%|$VALUE|g" $file
# 		done

# 		if [ ! -z "$FILE_THEME" ]; then
# 			for attr in ${ATTR_NAMES[@]}; do
# 				declare prev=$(cat $THEMES_PATH/$FILE_THEME.colors | grep -e "^$attr:.*" | awk -F ': ' '{print $2}')
# 				declare new=$(cat $THEMES_PATH/$NEW_THEME.colors | grep -e "^$attr:.*" | awk -F ': ' '{print $2}')
# 				if [ -z "$prev" ]; then
# 					continue
# 				fi
# 				if [ -z "$new" ]; then
# 					new="%$attr%"
# 				fi
# 				sed -i "s/$prev/$new/g" $file
# 			done
# 			sed -i "s/$(basename $file): .*/$(basename $file): $NEW_THEME/" $CURRENT_THEME_FILE

# 		else
# 			echo "$(basename $file): $NEW_THEME" >> $CURRENT_THEME_FILE
# 		fi

# 		echo -e "${B}->${W} Theme applied to ${G}$(basename $file)${W}"
# 		echo -e "\n---------------------\n"
# 	done
# }

function refreshKitty() {
	declare -r DEST=$1

	kitty @ set-colors --all $DEST &> /dev/null
	tput sgr0
	tput op
}

function refreshEnv() {
	declare -r APP_NAME=$1
	declare -r DEST=$2

	echo -e "${B}->${W} Executing post-script..."

	case "$APP_NAME" in
		kitty) refreshKitty $2;;
		polybar) bspc wm -r;;
		dunst) pkill dunst;;
		*) ;;	
	esac
}

function setWallpaper() {
	declare -r WALLPAPER=$(cat $THEMES_PATH/$1.colors | grep wallpaper | awk -F ': ' '{print $2}')

	if [ -z "$WALLPAPER" ]; then
		return
	fi

	# if [ ! -f $(realpath ~/.config/gtheme/wallpapers/Dracula/arch.png) ]; then
	# 	echo -e "${R}[!]${W} The file ${W_B}$WALLPAPER${W} does not exist!\n"
	# 	return
	# fi

	sed -i "s|.*WALLPAPER_URL=.*|WALLPAPER_URL=$WALLPAPER|" $SET_WALLPAPER_SCRIPT
	if [ ! -x $SET_WALLPAPER_SCRIPT ]; then
		echo -e "\n${Y}[!]${W} $SET_WALLPAPER_SCRIPT is not executable. Run chmod +x $SET_WALLPAPER_SCRIPT to solve it"
		return
	fi
	
	if $SET_WALLPAPER_SCRIPT; then
		echo -e "${B}[+]${W} Wallpaper ${W_B}$(basename $WALLPAPER)${W} applied!\n"

		sed -i "/.*wallpaper.*/d" $CURRENT_THEME_FILE
		echo -e "wallpaper: $WALLPAPER" >> $CURRENT_THEME_FILE
	else
		echo -e "${R}[!]${W} There was a error while setting the wallpaper.\n"
	fi
}

function setVscodeTheme() {
	declare -r VSCODETHEME=$(cat $THEMES_PATH/$1.colors | grep vscode | awk -F ': ' '{print $2}')
	if [ -z "$VSCODETHEME" ]; then
		return
	fi

	sed -i "s|\"workbench.colorTheme\": \".*\"|\"workbench.colorTheme\": \"$VSCODETHEME\"|" $VSCODE_SETTINGS_FILE
	echo -e "${B}[+]${W} Theme ${W_B}\"$VSCODETHEME\"${W} applied to Visual Studio Code!\n"

	sed -i "/.*vscode.*/d" $CURRENT_THEME_FILE
	echo -e "vscode: $VSCODETHEME" >> $CURRENT_THEME_FILE
}

function fillPattern() {
	echo -e "${B}->${W} Generating file for $1..."

	declare -r PATTERN=$PATTERNS_PATH/$1*
	declare -r IS_INVERTED=$3

	declare DEST="$(cat $PATTERN | grep -e ".*%output-file%.*" | awk -F '=' '{print $2}')"

	if [ -z "$DEST" ]; then
		echo -e "${R}[!]${W} No output file found. Using the default path."
		DEST=$HOME/.config/$1/gtheme-colors
	fi

	if [ ! -d $(dirname $DEST) ]; then
		echo -e "${R}[!]${W} The folder ${W_B}$(dirname $DEST)${W} does not exist!\n"
		return
	fi

	cp $PATTERN $DEST
	
	declare -r CONTENT="$(cat $THEMES_PATH/$2.colors)"
	for attr in ${ATTR_NAMES[@]}; do
		declare VALUE=$(echo "$CONTENT" | grep -e "^$attr:.*" | awk -F ': ' '{print $2}')

		# Invert colors
		if [ $IS_INVERTED -eq 1 ]; then
			if [ "$attr" == "background" ]; then
				attr="foreground"
			elif [ "$attr" == "foreground" ]; then
				attr="background"
			fi
		fi

		sed -i "s|%$attr%|$VALUE|g" $DEST
	done

	sed -i "s|%theme-name%| -------- Theme: $2 --------|" $DEST
	sed -i "s|.*%output-file%.*||" $DEST

	echo -e "${B}->${W} Created file ${W_B}$(basename $DEST)${W} in ${W_B}$(dirname $DEST)${W}"

	refreshEnv $1 $DEST

	echo -e "${B}->${W} Theme applied to ${G}$1${W}\n"

	echo -e "---------------------\n"
}

function generateFiles() {
	declare PATTERNS="$1"
	declare -r INVERTED_PATTERNS="$2"
	declare -r THEME_NAME="$3"

	if [ -z "$PATTERNS" ]; then
		PATTERNS="$(ls $PATTERNS_PATH | sed 's/\..*//g' )"
	fi

	echo
	for PATTERN in $PATTERNS; do
		sed -i "/.*$PATTERN.*/d" $CURRENT_THEME_FILE
		echo -e "$PATTERN: $THEME_NAME" >> $CURRENT_THEME_FILE

		if echo "$INVERTED_PATTERNS" | grep $PATTERN &>/dev/null; then
			fillPattern $PATTERN $THEME_NAME 1
		else
			fillPattern $PATTERN $THEME_NAME 0
		fi	
	done

	# checkExtraFiles $THEME_NAME

	if [[ -z "$1" || $IS_VSCODE -eq 1 ]]; then
		setVscodeTheme $THEME_NAME
	fi
	if [[ -z "$1" || $IS_WALLPAPER -eq 1 ]]; then
		setWallpaper $THEME_NAME
	fi
}

function showThemes() {
	declare -i COUNT=0
	declare -a COLOR_SCHEMES=($1)

	echo
	for theme in "${COLOR_SCHEMES[@]}"; do
		if cat $CURRENT_THEME_FILE | grep -e ": ${theme::-7}$" >/dev/null; then
			echo -e "${B}[$COUNT]${W} ${B}*${W}${theme::-7}${B}*${W} "
		else
			echo -e "${G}[$COUNT]${W} ${theme::-7} "
		fi
		COUNT=$COUNT+1
	done
	echo

	return $COUNT
}

function mainLoop() {
	declare -a COLOR_SCHEMES=($(ls $THEMES_PATH))
	declare -r COLOR_SCHEMES_STRING="${COLOR_SCHEMES[@]}"

	showThemes "$COLOR_SCHEMES_STRING"
	declare -r TOTAL_THEMES=$?

	while true; do
		read -p "Select a color scheme: (q to quit) " res

		if [[ "$res" == "q" || "$res" == "Q" ]]; then
			exit 0
		fi

		if [[ (-n "$res") && ("$res" -le $TOTAL_THEMES) ]]; then
			declare THEME_NAME=${COLOR_SCHEMES[$res]}
			generateFiles "$1" "$2" ${THEME_NAME::-7}
		else
			echo -e "${R}[!]${W} Invalid option!"
		fi

		showThemes "$COLOR_SCHEMES_STRING"
	done
}

declare -gi IS_VSCODE=0
declare -gi IS_WALLPAPER=0
function main() {
	while getopts "lhi:n:p:vwe" option; do
		case $option in
			l) showThemes "$(ls $THEMES_PATH)"; exit 0;;
			h) helpPanel; exit 0;;
			n) declare theme_name=$OPTARG;;
			p) declare patterns=$OPTARG;;
			i) declare inverted_patterns=$OPTARG;;
			v) IS_VSCODE=1;;
			w) IS_WALLPAPER=1;;
			*) helpPanel; exit 1;;
		esac
	done
	
	patterns="$(echo $patterns | sed 's/,/ /g')"
	inverted_patterns="$(echo $inverted_patterns | sed 's/,/ /g')"

	for pattern in $patterns $inverted_patterns; do
		if [ ! -f $PATTERNS_PATH/$pattern* ]; then
			echo -e "\n${R}[!]${W} The pattern ${W_B}$pattern${W} does not exist!\n"
			exit 0
		fi
	done

	if [ -z $theme_name ]; then
		mainLoop "$patterns" "$inverted_patterns"
	fi

	if [ ! -f $THEMES_PATH/$theme_name.colors ]; then
		echo -e "\n${R}[!]${W} The theme ${W_B}$theme_name${W} does not exist!\n"
		exit 1
	fi

	generateFiles "$patterns" "$inverted_patterns" $theme_name
}

main $@
