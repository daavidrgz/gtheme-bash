#!/bin/bash

#  ██████╗ ████████╗██╗  ██╗███████╗███╗   ███╗███████╗
# ██╔════╝ ╚══██╔══╝██║  ██║██╔════╝████╗ ████║██╔════╝
# ██║  ███╗   ██║   ███████║█████╗  ██╔████╔██║█████╗  
# ██║   ██║   ██║   ██╔══██║██╔══╝  ██║╚██╔╝██║██╔══╝  
# ╚██████╔╝   ██║   ██║  ██║███████╗██║ ╚═╝ ██║███████╗
#  ╚═════╝    ╚═╝   ╚═╝  ╚═╝╚══════╝╚═╝     ╚═╝╚══════╝
# @daavidrgz

GTHEME_PATH=$XDG_CONFIG_HOME/gtheme
THEMES_PATH=$GTHEME_PATH/themes
PATTERNS_PATH=$GTHEME_PATH/patterns
ACTIVE_PATTERNS_PATH=$GTHEME_PATH/patterns/active-patterns
POSTSCRIPTS_PATH=$GTHEME_PATH/post-scripts
CURRENT_THEME_FILE=$GTHEME_PATH/current-theme
FAV_THEMES_FILE=$GTHEME_PATH/fav-themes

# •• Global Settings
SET_WALLPAPER_SCRIPT="$POSTSCRIPTS_PATH/wallpaper.sh"
VSCODE_SETTINGS_FILE="$XDG_CONFIG_HOME/Code/User/settings.json"
ATTR_NAMES=("background" "foreground" "cursor" "selection-background" "selection-foreground" \
"black" "black-hg" "red" "red-hg" "green" "green-hg" "yellow" "yellow-hg" "blue" "blue-hg" "magenta" "magenta-hg" "cyan" "cyan-hg" "white" "white-hg")

# •• Colors
R="\e[1;31m"
G="\e[1;32m"
Y="\e[1;33m"
B="\e[1;34m"
M="\e[1;35m"
C="\e[1;36m"
GR="\e[0;2m"
W="\e[0m"
W_B="\e[1m"

trap ctrl_c INT
function ctrl_c() {
	echo -e "\n\n${R}[!]${W} Exiting...\n"
	tput cnorm
	exit 0
}

function helpPanel() {
	echo -e "\n${Y}[*]${W} Usage: gtheme [OPTIONS...]"
  echo -e "\nIf ${W_B}the flag -p isn't passed${W}, the choosed theme will be applied to ${W_B}all active patterns${W} by default."
	echo -e "\nOPTIONS:
  ${G}-a${W} <PATT1,PATT2...>       activate selected patterns.
  ${G}-r${W} <PATT1,PATT2...>       desactivate selected patterns.
  ${G}-p${W} <PATT1,PATT2...>       apply the theme only on selected patterns. Important: There must be no spaces between the patterns, only commas.
  ${G}-i${W} <PATT1,PATT2...>       invert the background and the foreground colors on selected patterns.
  ${G}-n${W} <THEME>                apply the specified <THEME>.
  ${G}-f${W} <THEME1,THEME2...>     flag selected themes as favourite or unflag them if they're already in the fav-themes file.
  ${G}-l${W} themes|patterns|favs   list all installed themes, patterns or favourite themes.
  ${G}-v${W}                        apply the VSCode theme.
  ${G}-w${W}                        apply the wallpaper.
  ${G}-h${W}                        show this panel.\n"
}

function executePostScript() {
	declare -r APP_NAME=$1

	echo -e "${B}•${W} Executing post-script..."

	if [ ! -e $POSTSCRIPTS_PATH/$APP_NAME.sh ]; then
		echo -e "${Y}•${W} No post-script found!"
		return
	fi

	$POSTSCRIPTS_PATH/$APP_NAME.sh $2
}

function setWallpaper() {
	declare -r WALLPAPER=$(cat $THEMES_PATH/$1.colors | grep wallpaper | awk -F ': ' '{print $2}')

	[ -z "$WALLPAPER" ] && return

	sed -i "s|.*WALLPAPER_URL=.*|WALLPAPER_URL=$WALLPAPER|" $SET_WALLPAPER_SCRIPT
	if [ ! -x $SET_WALLPAPER_SCRIPT ]; then
		echo -e "\n${Y}[!]${W} $SET_WALLPAPER_SCRIPT is not executable. Run chmod +x $SET_WALLPAPER_SCRIPT to solve it"
		return
	fi

	if $SET_WALLPAPER_SCRIPT; then
		echo -e "${B}[+]${W} Wallpaper ${W_B}$(basename $WALLPAPER)${W} applied!\n"

		sed -i "/.*wallpaper.*/d" $CURRENT_THEME_FILE
		echo -e "wallpaper: $WALLPAPER" >> $CURRENT_THEME_FILE
	else
		echo -e "${R}[!]${W} There was an error while setting the wallpaper.\n"
	fi
}

function setVscodeTheme() {
	declare -r VSCODETHEME=$(cat $THEMES_PATH/$1.colors | grep vscode | awk -F ': ' '{print $2}')
	[ -z "$VSCODETHEME" ] && return

	sed -i "s|\"workbench.colorTheme\": \".*\"|\"workbench.colorTheme\": \"$VSCODETHEME\"|" $VSCODE_SETTINGS_FILE
	echo -e "${B}[+]${W} Theme ${W_B}\"$VSCODETHEME\"${W} applied to Visual Studio Code!\n"

	sed -i "/.*vscode.*/d" $CURRENT_THEME_FILE
	echo -e "vscode: $VSCODETHEME" >> $CURRENT_THEME_FILE
}

function fillPattern() {
	echo -e "${B}•${W} Generating file for $1..."

	declare -r PATTERN="$ACTIVE_PATTERNS_PATH/$1.pattern"
	declare -r IS_INVERTED=$3

	declare DEST="$(cat $PATTERN | grep -e ".*%output-file%.*" | awk -F '=' '{print $2}')"

	if [ -z "$DEST" ]; then
		echo -e "${R}[!]${W} No output file found. Using the default path."
		DEST=$HOME/.config/$1/gtheme-colors
	fi

	if [ ! -e "$(dirname $DEST)" ]; then
		echo -e "${R}[!]${W} The folder ${W_B}$(dirname $DEST)${W} does not exist!\n"
		return
	fi

	cp $PATTERN $DEST
	
	declare -r CONTENT="$(cat $THEMES_PATH/$2.colors)"
	for attr in ${ATTR_NAMES[@]}; do
		declare VALUE=$(echo "$CONTENT" | grep -e "^$attr:.*" | awk -F ': ' '{print $2}')

		# Invert colors
		if [ $IS_INVERTED -eq 0 ]; then
			if [ "$attr" == "background" ]; then
				attr="foreground"
			elif [ "$attr" == "foreground" ]; then
				attr="background"
			fi
		fi

		sed -i "s|%$attr%|$VALUE|g" $DEST
	done

	sed -i "s|%theme-name%| -------- Theme: $2 --------|" $DEST
	sed -i "s|.*%output-file%.*||" $DEST

	echo -e "${B}•${W} Created file ${W_B}$(basename $DEST)${W} in ${W_B}$(dirname $DEST)${W}"

	executePostScript $1 $DEST

	echo -e "${B}•${W} Theme applied to ${G}$1${W}\n"

	echo -e "---------------------\n"
}

function generateFiles() {
	declare PATTERNS="$1"
	declare -r INVERTED_PATTERNS="$2"
	declare -r THEME_NAME="$3"

	[ -z "$PATTERNS" ] && PATTERNS="$(ls -p $ACTIVE_PATTERNS_PATH | grep -v / | sed 's/\..*//g' )"

	echo
	for PATTERN in $PATTERNS; do
		echo "$INVERTED_PATTERNS" | grep $PATTERN &>/dev/null
		fillPattern $PATTERN $THEME_NAME $?

		sed -i "/$PATTERN:.*/d" $CURRENT_THEME_FILE
		echo -e "$PATTERN: $THEME_NAME" >> $CURRENT_THEME_FILE
	done

	[ $IS_VSCODE -eq 0 ] && setVscodeTheme $THEME_NAME
	[ $IS_WALLPAPER -eq 0 ] && setWallpaper $THEME_NAME
}

function showPatterns() {
	declare -a PATTERNS=($@)

	echo
	for pattern in "${PATTERNS[@]}"; do
		if [ -e $ACTIVE_PATTERNS_PATH/$pattern ]; then
			printf "${B}•${W} %-20s ${B}Active${W}\n" "${pattern::-8}"
		else
			printf "${Y}•${W} %-20s ${Y}Not active${W}\n" "${pattern::-8}"
		fi
	done
	echo
}

function showAllThemes() {
	declare -i COUNT=0
	declare -a COLOR_SCHEMES=($@)

	echo
	for theme in "${COLOR_SCHEMES[@]}"; do
		declare FAV_COLOR=${W}
		if cat $FAV_THEMES_FILE | grep -e "^${theme::-7}$" &>/dev/null; then
			FAV_COLOR=${Y}
		fi

		if cat $CURRENT_THEME_FILE | grep -e ": ${theme::-7}$" &>/dev/null; then
			printf "${B}%7s${W} ${FAV_COLOR}%s ${B}(active)${W}\n" "[$COUNT]" "• ${theme::-7}"
		else
			printf "${G}%7s${W} ${FAV_COLOR}%s${W}\n" "[$COUNT]" "• ${theme::-7}"
		fi
		COUNT=$COUNT+1
	done
	echo

	TOTAL_THEMES=$COUNT
}

function showFavThemes() {
	echo
	for theme in $(cat $FAV_THEMES_FILE); do
		echo -e "${Y}•${W} $theme"
	done
	echo
}

function list() {
	case "$1" in
		"themes") showAllThemes "$(ls -p $THEMES_PATH | grep -v /)"; exit 0;;
		"patterns") showPatterns "$(ls -p $PATTERNS_PATH | grep -v /)"; exit 0;;
		"favs") showFavThemes; exit 0;;
		*) echo -e "\n${R}[!]${W} Invalid option ${W_B}$1${W}!\n"; exit 1;;
	esac
}

function keyInput() {
	read -rsn1 mode
	if [ "$mode" == $'\x1b' ]; then
		read -rsn2 mode
	fi

	case $mode in
		'[A') echo "up";;
		'[B') echo "down";;
		'') echo "enter";;
		'f') echo "fav";;
		*) echo invalid
	esac
}

function showThemes() {
	declare -a COLOR_SCHEMES=($(ls $THEMES_PATH | sed 's/.colors//g'))
	declare -i COUNT=$1
	declare -i NUM_ELEMS=20

	declare -i c=$(($COUNT-1-$NUM_ELEMS/2))
	[ $(($c + $NUM_ELEMS+2)) -gt $TOTAL_THEMES ] && c=$TOTAL_THEMES-$NUM_ELEMS-2

	declare -i i=0

	while [ $i -lt $(($NUM_ELEMS+1)) ] ; do
		c=c+1
		[ $c -lt 0 ] && continue

		if [ $c -eq $COUNT ]; then
			echo -en "${B}•${W} ${W_B}${COLOR_SCHEMES[$c]} ${G}↓ ${Y}↑${W}"
		else
			echo -en "${GR}• ${COLOR_SCHEMES[$c]}${W}"
		fi

		echo
		i=i+1
	done
}

function interactiveLoop() {
	declare -a COLOR_SCHEMES=($(ls $THEMES_PATH | sed 's/.colors//g'))
	declare -i COUNT=0
	declare THEME_NAME=""

	tput civis
	echo
	while true; do
		clear

		echo -e "${R} ██████╗ ${G} ████████╗${Y} ██╗  ██╗${B} ███████╗${M} ███╗   ███╗${C} ███████╗${W}"
		echo -e "${R}██╔════╝ ${G} ╚══██╔══╝${Y} ██║  ██║${B} ██╔════╝${M} ████╗ ████║${C} ██╔════╝${W}"
		echo -e "${R}██║  ███╗${G}    ██║   ${Y} ███████║${B} █████╗  ${M} ██╔████╔██║${C} █████╗  ${W}"
		echo -e "${R}██║   ██║${G}    ██║   ${Y} ██╔══██║${B} ██╔══╝  ${M} ██║╚██╔╝██║${C} ██╔══╝  ${W}"
		echo -e "${R}╚██████╔╝${G}    ██║   ${Y} ██║  ██║${B} ███████╗${M} ██║ ╚═╝ ██║${C} ███████╗${W}"
		echo -e "${R} ╚═════╝ ${G}    ╚═╝   ${Y} ╚═╝  ╚═╝${B} ╚══════╝${M} ╚═╝     ╚═╝${C} ╚══════╝${W}"
		echo

		showThemes $COUNT
		THEME_NAME=${COLOR_SCHEMES[$COUNT]}
		arrow=$(keyInput)
		case $arrow in
			"up") [ $COUNT -gt 0 ] && COUNT=$COUNT-1;;
			"down") [ $COUNT -lt $(($TOTAL_THEMES-1)) ] && COUNT=$COUNT+1;;
			"enter") echo -e "\n${B}Applying...${W}"; generateFiles "$1" "$2" $THEME_NAME &>/dev/null;;
			"fav") flagAsFavourite $THEME_NAME; sleep 1;;
			*) ;;
		esac
	done
	tput cnorm
}

# function mainLoop() {
# 	declare -a COLOR_SCHEMES=($(ls $THEMES_PATH))

# 	declare -g TOTAL_THEMES
# 	showAllThemes ${COLOR_SCHEMES[@]}

# 	while true; do
# 		read -p "Select a color scheme: (q to quit) " res

# 		([ "$res" == "q" ] || [ "$res" == "Q" ]) && ctrl_c

# 		if [[ ! -n $res || $res -ge $TOTAL_THEMES ]]; then
# 			echo -e "\n${R}[!]${W} Invalid option!\n"
# 			continue
# 		fi

# 		declare THEME_NAME=${COLOR_SCHEMES[$res]}
# 		generateFiles "$1" "$2" ${THEME_NAME::-7}

# 		showAllThemes ${COLOR_SCHEMES[@]}
# 	done
# }

function flagAsFavourite() {
	declare -a FAV_THEMES=($@)
	checkThemes "$@" 

	echo
	for theme in ${FAV_THEMES[@]}; do
		if cat $FAV_THEMES_FILE | grep $theme &>/dev/null; then
			sed -i "/$theme/d" $FAV_THEMES_FILE
			echo -e "${G}[-]${W} Theme ${W_B}$theme${W} succesfully removed from favourites!\n"
		else
			echo $theme >> $FAV_THEMES_FILE
			echo -e "${G}[+]${W} Theme ${W_B}$theme${W} succesfully added to favourites!\n"
		fi
	done
}

function addPatterns() {
	declare -a ADD_PATTERNS=($@)
	checkPatterns "$@"

	echo
	for pattern in ${ADD_PATTERNS[@]}; do
		if [ -e $ACTIVE_PATTERNS_PATH/$pattern.pattern ]; then
			echo -e "${Y}[!]${W} The pattern ${W_B}$pattern${W} is already active!\n"
			continue
		fi

		echo -e "${Y}•${W} Creating symlink ${W_B}$ACTIVE_PATTERNS_PATH/$pattern.pattern${W}..."
		if ln -s ../$pattern.pattern $ACTIVE_PATTERNS_PATH/$pattern.pattern; then
			echo -e "${G}•${W} Pattern ${W_B}$pattern${W} succesfully activated!\n"
		else
			echo -e "${R}•${W} Error while activating the pattern $pattern!\n"
		fi
	done

	exit 0
}

function removePatterns() {
	declare -a REMOVE_PATTERNS=($@)
	checkPatterns "$@"

	echo
	for pattern in ${REMOVE_PATTERNS[@]}; do
		if [ ! -e $ACTIVE_PATTERNS_PATH/$pattern.pattern ]; then
			echo -e "${Y}[!]${W} The pattern ${W_B}$pattern${W} is already inactive!\n"
			continue
		fi

		echo -e "${Y}•${W} Deleting symlink ${W_B}$ACTIVE_PATTERNS_PATH/$pattern.pattern${W}..."
		if rm $ACTIVE_PATTERNS_PATH/$pattern.pattern; then
			echo -e "${G}•${W} Pattern ${W_B}$pattern${W} succesfully desactivated!\n"
		else
			echo -e "${R}•${W} Error while desactivating the pattern $pattern!\n"
		fi
	done

	exit 0;
}

function checkPatterns() {
	declare -a PATTERNS=($@)

	for pattern in ${PATTERNS[@]}; do
		if [ ! -e $PATTERNS_PATH/$pattern.pattern ]; then
			echo -e "\n${R}[!]${W} The pattern ${W_B}$pattern${W} does not exist!\n"
			exit 1
		fi
	done
}

function checkThemes() {
	declare -a THEMES=($@)

	for theme in ${THEMES[@]}; do
		if [ ! -e $THEMES_PATH/$theme.colors ]; then
			echo -e "\n${R}[!]${W} The theme ${W_B}$theme${W} does not exist!\n"
			exit 1
		fi
	done
}

declare -gi IS_VSCODE=1
declare -gi IS_WALLPAPER=1
declare -gi TOTAL_THEMES=$(ls $THEMES_PATH | wc -l)
function main() {
	while getopts "l:hi:n:p:vwa:r:f:" option; do
		case $option in
			l) list $OPTARG;;
			h) helpPanel; exit 0;;
			a) addPatterns "$(echo $OPTARG | sed 's/,/ /g')";;
			r) removePatterns "$(echo $OPTARG | sed 's/,/ /g')";;
			f) flagAsFavourite "$(echo $OPTARG | sed 's/,/ /g')"; exit 0;;
			n) declare theme_name=$OPTARG;;
			p) declare patterns=$OPTARG;;
			i) declare inverted_patterns=$OPTARG;;
			v) IS_VSCODE=0;;
			w) IS_WALLPAPER=0;;
			*) helpPanel; exit 1;;
		esac
	done
	
	patterns="$(echo $patterns | sed 's/,/ /g')"
	inverted_patterns="$(echo $inverted_patterns | sed 's/,/ /g')"
	checkPatterns "$patterns $inverted_patterns"

	[ -z $theme_name ] && interactiveLoop "$patterns" "$inverted_patterns"

	if [ ! -e $THEMES_PATH/$theme_name.colors ]; then
		echo -e "\n${R}[!]${W} The theme ${W_B}$theme_name${W} does not exist!\n"
		exit 1
	fi

	generateFiles "$patterns" "$inverted_patterns" $theme_name
}

main "$@"
