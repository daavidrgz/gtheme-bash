#!/bin/bash

#  ██████╗ ████████╗██╗  ██╗███████╗███╗   ███╗███████╗
# ██╔════╝ ╚══██╔══╝██║  ██║██╔════╝████╗ ████║██╔════╝
# ██║  ███╗   ██║   ███████║█████╗  ██╔████╔██║█████╗  
# ██║   ██║   ██║   ██╔══██║██╔══╝  ██║╚██╔╝██║██╔══╝  
# ╚██████╔╝   ██║   ██║  ██║███████╗██║ ╚═╝ ██║███████╗
#  ╚═════╝    ╚═╝   ╚═╝  ╚═╝╚══════╝╚═╝     ╚═╝╚══════╝


GTHEME_PATH=$XDG_CONFIG_HOME/gtheme
THEMES_PATH=$GTHEME_PATH/themes
PATTERNS_PATH=$GTHEME_PATH/patterns
CURRENT_THEME_FILE=$GTHEME_PATH/current-theme

# •• Global Settings
SET_WALLPAPER_SCRIPT="$GTHEME_PATH/setwp"
VSCODE_SETTINGS_FILE="$XDG_CONFIG_HOME/Code/User/settings.json"
ATTR_NAMES=("background" "foreground" "cursor" "selection-background" "selection-foreground" \
"black" "black-hg" "red" "red-hg" "green" "green-hg" "yellow" "yellow-hg" "blue" "blue-hg" "magenta" "magenta-hg" "cyan" "cyan-hg" "white" "white-hg")

# Scan first for pattern-like colors.
# If no one is found and the colors match the current theme applied *on that file* they will be replaced.
EXTRA_FILES=("$XDG_CONFIG_HOME/dunst/dunstrc")

# •• Colors
G="\e[1;32m"
R="\e[1;31m"
Y="\e[1;33m"
B="\e[1;34m"
W="\e[0m"
W_B="\e[1m"

function listThemes() {
	echo
	for theme in $(ls $THEMES_PATH); do
		CONTENT=$(cat $THEMES_PATH/$theme)

		if [ $(readlink $HOME/.config/kitty/theme.conf) == "$THEMES_PATH/$theme" ]; then # Current theme
			echo -e "${B}->${W} ${B}*${W}${theme::-5}${B}*${W} "
		else
			echo -e " ${G}-${W} ${theme::-5} "
		fi
	done
	echo
}

function helpPanel() {
	echo -e "\n${Y}[*]${W} Usage: change-theme [OPTION] [THEME]"
	echo -e "\nIt will set the THEME's color schema to kitty, polybar, rofi and dunst.
More rules can be specified to change the wallpaper, the VSCode color palette, etc..."
	echo -e "\nOPTIONS:
  ${G}-h${W}                  Show this panel.
  ${G}-l${W}                  List all installed themes.
  ${G}-n <THEME_NAME>${W}     Apply the specified <THEME_NAME>

Note: The default path is $CONFIG_PATH/gtheme/\n"
}


function applyColors {
	#----------------------
	#   CMUS
	#----------------------
	CMUSTHEME=$(cat $THEMES_PATH/$THEME.conf | grep CmusTheme | awk -F ': ' '{print $2}')
	if [ "$CMUSTHEME" != "" ]; then
		sed -i "s|colorscheme .*|colorscheme themes/$CMUSTHEME|" $CONFIG_PATH/cmus/rc
		echo -e "${B}->${W} Theme apllied to Cmus"
	fi	
}

checkExtraFiles() {
	NEW_THEME=$1

	for file in $EXTRA_FILES; do
		if [ ! -f $file ]; then
			echo -e "${R}[!]${W} The file ${W_B}$file${W} does not exist!"
			continue
		fi

		FILE_THEME=$(cat $CURRENT_THEME_FILE | grep $(basename $file) | awk -F ': ' '{print $2}')

		CONTENT="$(cat $THEMES_PATH/$NEW_THEME.colors)"
		for attr in ${ATTR_NAMES[@]}; do
			VALUE=$(echo "$CONTENT" | grep -e "^$attr:.*" | awk -F ': ' '{print $2}')
			sed -i "s|%$attr%|$VALUE|g" $file
		done

		if [ ! -z "$FILE_THEME" ]; then
			for attr in ${ATTR_NAMES[@]}; do
				prev=$(cat $THEMES_PATH/$FILE_THEME.colors | grep -e "^$attr:.*" | awk -F ': ' '{print $2}')
				new=$(cat $THEMES_PATH/$NEW_THEME.colors | grep -e "^$attr:.*" | awk -F ': ' '{print $2}')
				if [ -z "$prev" ]; then
					continue
				fi
				if [ -z "$new" ]; then
					new="%$attr%"
				fi
				sed -i "s/$prev/$new/g" $file
			done
			sed -i "s/$(basename $file): .*/$(basename $file): $NEW_THEME/" $CURRENT_THEME_FILE

		else
			echo "$(basename $file): $NEW_THEME" >> $CURRENT_THEME_FILE
		fi
	done
}

function refreshKitty() {
	DEST=$1

	kitty @ set-colors --all $DEST &> /dev/null
	tput sgr0
	tput op
}

function refreshEnv() {
	APP_NAME=$1
	DEST=$2

	case "$APP_NAME" in
		kitty) refreshKitty $2;;
		polybar) bspc wm -r;;
		*) ;;	
	esac
}

function setWallpaper() {
	WALLPAPER=$(cat $THEMES_PATH/$1.colors | grep wallpaper | awk -F ': ' '{print $2}')

	if [ -z $WALLPAPER ]; then
		return
	fi

	sed -i "s|.*WALLPAPER_URL=.*|WALLPAPER_URL=$WALLPAPER|" $SET_WALLPAPER_SCRIPT
	if [ ! -x $SET_WALLPAPER_SCRIPT ]; then
		echo -e "\n${Y}[!]${W} $SET_WALLPAPER_SCRIPT is not executable. Run chmod +x $SET_WALLPAPER_SCRIPT to solve it"
		return
	fi
	
	$SET_WALLPAPER_SCRIPT
	echo -e "\n${B}[+]${W} Wallapper applied!"

	sed -i "/.*wallpaper.*/d" $CURRENT_THEME_FILE
	echo -e "wallpaper: $WALLPAPER" >> $CURRENT_THEME_FILE
}

function setVscodeTheme() {
	VSCODETHEME=$(cat $THEMES_PATH/$1.colors | grep vscode | awk -F ': ' '{print $2}')
	if [ -z "$VSCODETHEME" ]; then
		return
	fi

	sed -i "s|\"workbench.colorTheme\": \".*\"|\"workbench.colorTheme\": \"$VSCODETHEME\"|" $VSCODE_SETTINGS_FILE
	echo -e "\n${B}[+]${W} Theme applied to VSCode!"

	sed -i "/.*vscode.*/d" $CURRENT_THEME_FILE
	echo -e "vscode: $VSCODETHEME" >> $CURRENT_THEME_FILE
}

function fillPattern() {
	PATTERN_FP=$PATTERNS_PATH/$1.pattern

	EXTENSION=$(cat $PATTERN_FP | grep %extension% | awk -F '=' '{print $2}')
	
	DEST=$HOME/.config/$1/colors.$EXTENSION

	cp $PATTERN_FP $DEST
	
	CONTENT="$(cat $THEMES_PATH/$2.colors)"
	for attr in ${ATTR_NAMES[@]}; do
		VALUE=$(echo "$CONTENT" | grep -e "^$attr:.*" | awk -F ': ' '{print $2}')
		sed -i "s|%$attr%|$VALUE|g" $DEST
	done

	sed -i "s|%theme-name%| -------- Theme: $2 --------|" $DEST
	sed -i 's|.*%extension%.*||' $DEST

	refreshEnv $1 $DEST

	echo -e "${B}->${W} Theme applied to ${G}$1${W}"
}

function generateFiles() {
	PATTERNS_GF="$1"
	THEME_NAME_GF="$2"

	if [ -z $PATTERNS_GF ]; then
		PATTERNS_GF="$(ls $PATTERNS_PATH | sed 's/.pattern//g' )"
	else
		PATTERNS_GF="$(echo $PATTERNS_GF | sed 's/,/ /g')"
	fi
	
	echo
	for PATTERN_GF in $PATTERNS_GF; do
		sed -i "/.*$PATTERN_GF.*/d" $CURRENT_THEME_FILE
		echo -e "$PATTERN_GF: $THEME_NAME_GF" >> $CURRENT_THEME_FILE

		fillPattern $PATTERN_GF $THEME_NAME_GF
	done
	
	setVscodeTheme $THEME_NAME_GF
	setWallpaper $THEME_NAME_GF

	checkExtraFiles $THEME_NAME_GF

	echo -e "\n${G}[+]${W} Theme changed succesfully!\n"
}

function showThemes() {
	COUNT=0
	COLOR_SCHEMES=($1)

	echo
	for theme in "${COLOR_SCHEMES[@]}"; do
		if cat $CURRENT_THEME_FILE | grep -e ": ${theme::-7}$" >/dev/null; then
			echo -e "${B}[$COUNT]${W} ${B}*${W}${theme::-7}${B}*${W} "
		else
			echo -e "${G}[$COUNT]${W} ${theme::-7} "
		fi
		COUNT=$(($COUNT+1))
	done

	return $COUNT
}

function mainLoop() {
	PATTERNS="$1"
	COLOR_SCHEMES=($(ls $THEMES_PATH))

	COLOR_SCHEMES_STRING="${COLOR_SCHEMES[@]}"

	showThemes "$COLOR_SCHEMES_STRING"
	TOTAL_THEMES=$?

	while true; do
		echo; read -p "Select a color scheme: (q to quit) " res

		if [[ "$res" == "q" || "$res" == "Q" ]]; then
			exit 0
		fi

		if [[ (-n "$res") && ("$res" -le $TOTAL_THEMES) ]]; then
			THEME_NAME=${COLOR_SCHEMES[$res]}
			generateFiles "$PATTERNS" ${THEME_NAME::-7}
		else
			echo -e "${R}[!]${W} Invalid option!"
		fi

		showThemes "$COLOR_SCHEMES_STRING"
	done
}

while getopts "lhn:p:" option; do
	case $option in
		l) listThemes; exit 0;;
		h) helpPanel; exit 0;;

		n) theme_name=$OPTARG;;
		p) patterns=$OPTARG;;
		*) helpPanel; exit 1;;
	esac
done

for pattern in $patterns; do
	if [ ! -f $PATTERNS_PATH/$pattern.pattern ]; then
		echo -e "\n${R}[!]${W} The pattern ${W_B}$pattern${W} does not exist!\n"
		exit 0
	fi
done

if [ -z $theme_name ]; then
	mainLoop "$patterns"
fi

if [ ! -f $THEMES_PATH/$theme_name.colors ]; then
	echo -e "\n${R}[!]${W} The theme ${W_B}$theme_name${W} does not exist!\n"
	exit 1
fi

generateFiles "$patterns" $theme_name
